import logging

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger_kb_utils = logging.getLogger(__name__)


def create_static_kb(width: int = 1,
                     *args,
                     cancel_butt=False,
                     back=False,
                     exit_=False,
                     reverse_size_text=False,
                     url_buttons: dict = None,
                     **kwargs) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CallbackData
    Args:
        width (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        *args (str | CallbackData): –ö–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ CallbackData)
        cancel_butt (bool): –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'
        back (bool): –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        exit_ (bool): –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–í—ã–π—Ç–∏"
        reverse_size_text (bool): –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –±–æ–ª—å—à–∏—Ö/–º–∞–ª–µ–Ω—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
        url_buttons (dict): –ö–Ω–æ–ø–∫–∏ —Å URL {—Ç–µ–∫—Å—Ç: url}
        **kwargs : –ö–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {callback_data: —Ç–µ–∫—Å—Ç}

    Returns: InlineKeyboardMarkup
    """
    BUTT_CANCEL: dict[str, str] = {'cancel': '–û—Ç–º–µ–Ω–∞'}
    BUTT_BACK: dict[str, str] = {'back': 'üîô –ù–∞–∑–∞–¥'}
    BUTT_EXIT: dict[str, str] = {'exit': '–í—ã–π—Ç–∏'}
    
    kb_builder = InlineKeyboardBuilder()
    big_text: list[InlineKeyboardButton] = []
    small_text: list[InlineKeyboardButton] = []
    
    if args:
        for item in args:
            text = BUTT_CANCEL.get(
                item, item)
            btn = InlineKeyboardButton(
                text=text, callback_data=item)
            (big_text if len(text) > 16 else small_text).append(btn)
    
    if kwargs:
        for data, text in kwargs.items():
            btn = InlineKeyboardButton(
                text=text, callback_data=data)
            (big_text if len(text) > 16 else small_text).append(btn)
    
    if reverse_size_text:
        kb_builder.row(*small_text, width=width)
        kb_builder.row(*big_text, width=1)
    else:
        kb_builder.row(*big_text, width=1)
        kb_builder.row(*small_text, width=width)
    
    # –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ –∫–Ω–æ–ø–∫–∏(–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    if url_buttons:
        url_buttons_list = [InlineKeyboardButton(text=text, url=url) for
            text, url in url_buttons.items()]
        
        kb_builder.row(*url_buttons_list, width=1)
    
    # Other buttons
    if cancel_butt:
        kb_builder.row(
            InlineKeyboardButton(
                text=BUTT_CANCEL['cancel'], callback_data='/cancel'))
    
    if exit_:
        kb_builder.row(
            InlineKeyboardButton(text=BUTT_EXIT['exit'], callback_data='/exit'))
    if back:
        kb_builder.row(
            InlineKeyboardButton(text=BUTT_BACK['back'], callback_data='back'))
    return kb_builder.as_markup()


async def create_notification_settings_kb(user_data_notif: dict):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫
    solution_text = 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö' if user_data_notif.get(
        'is_notif_solution', True) else 'üü¢ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏—è—Ö'
    solution_clbk = 'off_notif_solution' if user_data_notif.get(
        'is_notif_solution', True) else 'on_notif_solution'
    
    uninformative_text = 'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ' if user_data_notif.get(
        'is_notif_uninformative', True) else 'üü¢ –í–∫–ª—é—á–∏—Ç—å –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ'
    uninformative_cb = 'off_notif_uninformative' if user_data_notif.get(
        'is_notif_uninformative', True) else 'on_notif_uninformative'
    
    kb = create_static_kb(
        **{solution_clbk: solution_text},
        **{uninformative_cb: uninformative_text},
        back=True,
        cancel_butt=False,
        exit_=True)
    
    return kb
