import logging
from itertools import batched

from aiogram import F, Router
from aiogram.filters import or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from filters.filters import AccessOwnersFilter, AccessUsersFilter
from keyboards.keyboards import kb_own_start, kb_user_start
from utils.redis_service import RedisService
from utils.utils import MessageProcessor, get_username

logger = logging.getLogger(__name__)

user_router = Router()

user_router.message.filter(
    or_f(
        AccessOwnersFilter(), AccessUsersFilter()))
user_router.callback_query.filter(
    or_f(
        AccessOwnersFilter(), AccessUsersFilter()))


@user_router.callback_query(F.data.in_(['/cancel', '/exit']))
async def clbk_cancel(clbk: CallbackQuery,
                      owners: list[int],
                      msg_processor: MessageProcessor,
                      redis_service: RedisService,
                      state: FSMContext) -> None:
    """
    Handler for the /cancel and /exit callback commands.
    
    Args:
        clbk (CallbackQuery): The callback query object that triggered the
            /cancel or /exit command
        msg_processor (MessageProcessor): An instance of the MessageProcessor
            class for deleting messages.
        redis_service (RedisService): An instance of the RedisService class for
            working with Redis.
        state (FSMContext): An instance of the FSMContext class for managing
            state.
        owners (list[int]): A list of owner IDs.
    """
    logger.debug('Entry')
    
    data = await redis_service.get_stepik_courses_ids()
    _bat = tuple(' '.join(x) for x in batched(map(str, data), 3))
    stepik_courses_ids = '\n'.join(_bat)
    
    text = (f'<b>–ú–æ–Ω–∏—Ç–æ—Ä—é –∫—É—Ä—Å—ã Stepik:</b>\n'
            f'<pre>\n{stepik_courses_ids if stepik_courses_ids else
            '<i>–ü–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</i>'}</pre>\n')
    
    user_tg_id = clbk.from_user.id
    keyboard = kb_user_start if user_tg_id not in owners else kb_own_start
    
    value = await clbk.message.edit_text(text=text, reply_markup=keyboard)
    await msg_processor.save_msg_id(value, msgs_for_del=True)

    await state.set_state(state=None)
    await clbk.answer()
    
    logger.debug(f'State clear:{await get_username(clbk)}:{clbk.from_user.id}')
    logger.debug('Exit')


@user_router.message(F.text == '/start')
async def cmd_start(msg: Message,
                    msg_processor: MessageProcessor,
                    redis_service: RedisService,
                    owners: list[int],
                    state: FSMContext) -> None:
    """
    Handler for the /start command.

    Sends a welcome message to the user and starts monitoring comments on the
    courses specified in the `stepik_courses_ids` list.

    Args:
        redis_service (RedisService): An instance of the RedisService class for
            working with Redis.
        owners (list[int]): A list of owner IDs
        msg (Message): The message object that triggered the /start command
        msg_processor (MessageProcessor): An instance of the MessageProcessor
            class for deleting messages
        state (FSMContext): An instance of the FSMContext class for managing
            state.
    """
    logger.debug('Entry')
    
    await msg_processor.deletes_messages(msgs_for_del=True)
    
    data = await redis_service.get_stepik_courses_ids()
    _bat = tuple(' '.join(x) for x in batched(map(str, data), 3))
    stepik_courses_ids = '\n'.join(_bat)
    
    text = (f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {await get_username(msg)} !</b>\n'
            f'–ú–æ–Ω–∏—Ç–æ—Ä—é –∫—É—Ä—Å—ã Stepik:\n'
            f'<pre>\n{stepik_courses_ids if stepik_courses_ids else
                '\n<i>–ü–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</i>\n'}</pre>\n\n'
            f'<b>–í–∞–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–æ–≤ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∞ –∫—Ä—É–∂–∫–∞–º–∏:</b>\n'
            f'<pre><b>–ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–∂–æ–∫</b> üü¢ - –í–µ—Ä–æ—è—Ç–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.\n\n'
            f'<b>–ñ–µ–ª—Ç—ã–π –∫—Ä—É–∂–æ–∫</b> üü°  - –í–µ—Ä–æ—è—Ç–Ω–æ –ù–ï –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.</pre>\n'
            f'–í–∞–∂–Ω–æ‚ùó\n'
            f'–ü–æ–∫–∞ –≤—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Å –±–æ—Ç–æ–º, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö'
            f' –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç. –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ –∑–Ω–∞—á–∫–æ–º: üìµ\n'
            f'–ü–æ —ç—Ç–æ–º—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π - –≤—ã–π–¥–∏—Ç–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞'
            f' –Ω–∞–∂–∞–≤ <b>–û—Ç–º–µ–Ω–∞</b>, <b>–í—ã—Ö–æ–¥</b> –∏–ª–∏'
            f' <b>/start</b>(–≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é)\n\n'
            f'<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª–µ—Ç–∞</b> ü´°')
    
    user_tg_id = msg.from_user.id
    tg_nickname: str = await get_username(msg)

    keyboard = kb_user_start if user_tg_id not in owners else kb_own_start
    value = await msg.answer(text=text, reply_markup=keyboard)
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    
    if user_tg_id in owners:
        await redis_service.add_owner(
            tg_user_id=user_tg_id, tg_nickname=tg_nickname)
    
    if await redis_service.check_user(tg_user_id=user_tg_id):
        await redis_service.update_user_username(tg_user_id=user_tg_id,
                                                 tg_nickname=tg_nickname)
        logger.info(f'User {tg_nickname} updated.')
    await state.set_state(None)

    logger.debug(f'State clear:{tg_nickname}:{user_tg_id}')
    logger.debug('Exit')

@user_router.callback_query()
async def clbk_other_handler(clbk: CallbackQuery):
    logger.debug('Entry')
    logger.debug(f'{clbk.data=}')
    
    await clbk.answer('–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)
    
    logger.debug('Exit')

@user_router.message()
async def msg_other(msg: Message):
    logger.debug('Entry')
    
    await msg.delete()
    
    logger.debug('Exit')
    
