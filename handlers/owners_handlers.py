import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from filters.filters import AccessRightsFilter
from utils.utils import MessageProcessor, get_username
from lexicon.lexicon_ru import LexiconRu

logger_owners = logging.getLogger(__name__)

owners_router = Router()

owners_router.message.filter(AccessRightsFilter())
owners_router.callback_query.filter(AccessRightsFilter())


@owners_router.message(F.text == '/start')
async def cmd_start(msg: Message,
                    msg_processor: MessageProcessor,
                    stepik_courses_ids: list[int]) -> None:
    """
    Handler for the /start command.
    Sends a welcome message to the user and starts monitoring comments on the
    courses specified in the `stepik_courses_ids` list.
    Args:
        msg (Message): The message object that triggered the /start command
        msg_processor (MessageProcessor): An instance of the MessageProcessor
            class for deleting messages.
        stepik_courses_ids (list[int]): A list of course IDs to monitor for
            comments.
    """
    logger_owners.debug('Entry')
    
    await msg_processor.deletes_messages(msgs_for_del=True)
    
    text = (f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {await get_username(msg)}!</b>\n'
            f'–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫—É—Ä—Å—ã Stepik:\n'
            f'{stepik_courses_ids}\n'
            f'<b>–í–∞–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–æ–≤ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∞ –∫—Ä—É–∂–∫–∞–º–∏:</b>\n'
            f'<pre>–ó–µ–ª–µ–Ω—ã–π –∫—Ä—É–∂–æ–∫ üü¢ - –í–µ—Ä–æ—è—Ç–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.\n'
            f'–ö—Ä–∞—Å–Ω—ã–π –∫—Ä—É–∂–æ–∫ üî¥ - –í–µ—Ä–æ—è—Ç–Ω–æ –ù–ï –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.</pre>\n'
            f'<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª–µ—Ç–∞</b> ü´°')
    
    value = await msg.answer(text=text, reply_markup=kb_add_course)
    
    await msg_processor.save_msg_id(value, msgs_for_del=True)
    logger_owners.debug('Exit')


@owners_router.callback_query(F.data.in_(['add_course']))
async def in_development(clbk: CallbackQuery):
    logger_owners.debug('Entry')
    await clbk.answer('–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)
    logger_owners.debug('Exit')
